/**
 * Documentation can automatically be generated by removing the map section and exporting as JSON
 * then running the Adobe jsonschema2md utility here: https://www.npmjs.com/package/@adobe/jsonschema2md
 */

export default {
  $schema: 'http://json-schema.org/draft-07/schema#',
  // Standard object mapping format. See this link for usage: https://www.npmjs.com/package/object-mapper
  map: {
    'toLegacy': {
      'meta.start': {
        key: 'startTimeMs',
        transform: seconds => parseInt(seconds * 1000)
      },
      'meta.end': {
        key: 'endTimeMs',
        transform: seconds => parseInt(seconds * 1000)
      },
      'meta.icon': {
        key: 'dataObject.mainImageUrl',
        transform: imageUrl => imageUrl || 'https://cdn.sourcesync.io/media/default-icon.png'
      },
      'version': 'mapped',
      'type': 'dataTypeName',
      'behavior': 'behavior',
      'meta.productId': 'dataObject.data.externalProductId',
      'meta.storefront': 'dataObject.data.externalCatalogId',
      'meta.media': 'dataObject.media',
      'meta.display': 'dataObject.name',
      'data.name': 'dataObject.data.name',
      'data.discription': 'dataObject.data.discription',
      'data.label': 'dataObject.data.buttonText',
      'data.link': 'dataObject.data.buttonRedirectUrl',
      'data.price': [
        { key: 'dataObject.data.price' },
        { key: 'dataObject.data.basePrice' }
      ]
    }
  },
  'type': 'object',
  'required': ['version', 'meta'],
  'properties': {
    'version': {
      'type': 'integer',
      'minimum': 1
    },
    'meta': {
      'type': 'object',
      'required': ['storefront', 'productId', 'start', 'end'],
      'properties': {
        'storefront': {
          'type': 'string'
        },
        'productId': {
          'type': 'string'
        },
        'start': {
          'type': 'number',
          'minimum': 0
        },
        'end': {
          'type': 'number',
          'minimum': 0
        },
        // Timeline is 'content' by default
        'timeline': {
          'type': 'string',
          'enum': ['content', 'session', 'live']
        }
      }
    },
    'data': {
      'type': 'object',
      'properties': {
        'price': {
          'type': 'number'
        },
        'description': {
          'type': 'string'
        },
        'name': {
          'type': 'string'
        }
      }
    }
  }
}
